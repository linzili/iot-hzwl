name: CI/CD Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: setup java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: setup gradle
        uses: gradle/actions/setup-gradle@v3
      - name: build
        run: gradle :iot-server:build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: iot-server/build/libs/iot-server.jar
  release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: iot-server/build/libs/iot-server.jar
      - name: Read changelog for current version
        id: changelog
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'CHANGELOG.md';
            const tag = process.env.GITHUB_REF_NAME; 
            const content = fs.readFileSync(path, 'utf8');
            const regex = new RegExp(`## \\[${tag}\\](.*?)(## \\[v|$)`, 's');
            const match = content.match(regex);
            if (match) {
              const changelog = match[1].trim();
                core.setOutput('changelog', '['+process.env.GITHUB_REF_NAME+']'+changelog);
                } else {
              throw new Error(`No changelog entry found for version ${tag}`);
            }

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: iot-server/build/libs/iot-server.jar
          body: ${{ steps.changelog.outputs.changelog }}
  buildImage:
    permissions:
      packages: write
      contents: write
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: iot-server/build/libs/iot-server.jar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository }}:${{ github.ref_name }}-${{ github.run_id }} -f Dockerfile .
          docker push ghcr.io/${{ github.repository }}:${{ github.ref_name }}-${{ github.run_id }}

  deployImage:
    runs-on: ubuntu-latest
    needs: buildImage
    steps:
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}-${{ github.run_id }}
            # if [ \$(docker ps -q -f name=${{ github.repository }}) ]; then docker rm -f ${{ github.repository }}; fi
            if [ $(docker ps -q -f name=$REPO_NAME) ]; then docker rm -f $REPO_NAME; fi
            docker run -d --network host --name $REPO_NAME ghcr.io/${{ github.repository }}:${{ github.ref_name }}-${{ github.run_id }}
